<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>physics on 3implieschaos</title>
    <link>https://3implieschaos.org/tags/physics/</link>
    <description>Recent content in physics on 3implieschaos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Jul 2022 15:21:05 -0700</lastBuildDate><atom:link href="https://3implieschaos.org/tags/physics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automating a Kerbal trip to the moon with KRPC</title>
      <link>https://3implieschaos.org/post/math_science/kerbal/apollo-into-orbit/</link>
      <pubDate>Sat, 23 Jul 2022 15:21:05 -0700</pubDate>
      
      <guid>https://3implieschaos.org/post/math_science/kerbal/apollo-into-orbit/</guid>
      
      <description>&lt;p&gt;&lt;img src=&#34;assets/index-02bb3.png&#34; alt=&#34;A picture of the kerbal apollo rocket&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;krpc_sanbox-into-orbit.ipynb&#34;&gt;Download&lt;/a&gt; the corresponding notebook.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Kerbal Space Program (KSP) (1.0) is a semi-physics-realistic space exploration simulation. While it is not realistic enough to plan actual space missions, it is a fun educational tool that can get us started. With the kRPC mod (remote procedure call, which enables programatic interaction with KSP&amp;rsquo;s API), the educational potential is expanded into the world of programming. In this notebook, we will automate taking the Kerbins to the moon and back using Python, Physics, and KSP with the kRPC mod.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;h4 id=&#34;get-ksp&#34;&gt;Get KSP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Purchase and install the Kerbal Space Program (v 1.0) &lt;a href=&#34;https://www.kerbalspaceprogram.com/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll also need the &lt;a href=&#34;https://www.kerbalspaceprogram.com/games-kerbal-space-program-making-history-expansion&#34;&gt;&amp;ldquo;Making History&amp;rdquo; expansion&lt;/a&gt; which has the Apollo rocket equivalent, unless you prefer to save some money and build an equivalent rocket yourself or find the ship file online. Note that this code is tested and verified to work with the Acopollo rocket found in this expansion, so you may have to make adjustments to get alternative rockets to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;install-the-krpc-mod&#34;&gt;Install the KRPC mod&lt;/h4&gt;
&lt;p&gt;Follow &lt;a href=&#34;https://krpc.github.io/krpc/getting-started.html&#34;&gt;this guide&lt;/a&gt; to install the kRPC mod. More or less, you&amp;rsquo;ll grab the kRPC folder and put it in the &lt;code&gt;GameData&lt;/code&gt; folder wherever Kerbal is installed on your workstation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/index-439c4.png&#34; alt=&#34;An image that shows the folder structure of KSP on Windows&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;prepping-the-jupyter-workspace&#34;&gt;Prepping the jupyter workspace&lt;/h4&gt;
&lt;p&gt;If you are using Windows, &lt;a href=&#34;https://docs.anaconda.com/anaconda/install/windows/&#34;&gt;installing anaconda&lt;/a&gt; may be your quickest route, and then set up a kerbal environment by opensing a terminal and running:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda create --name kerbal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;rsquo;ll only need to create the envrionment once. Next activate it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda activate kerbal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are on MacOS or Linux, you can use virtualenv instead (although conda can work too).&lt;/p&gt;
&lt;p&gt;and then install the following packages:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install setuptools==57.5.
pip install protobuf~=3.19.0
pip install krpc
pip install jupyter
pip install ipykernel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or preferably, use a requirements file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;setuptools==57.5.0
protobuf~=3.19.0
krpc
jupyter
ipykernel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are using Python &amp;gt;= 3.8, you&amp;rsquo;ll have to do a little hack. Open the file in your virtual environment files with an editor and make the following change.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FILE: Should be in your virtual environment with something along the lines of &lt;code&gt;venv/lib/python3.10/site-packages/krpc/types.py&lt;/code&gt; on line 222 and 227.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;collections&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Iterable
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;collections&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;abc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Iterable
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, create the kernel that we&amp;rsquo;ll be using for this notebook:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python -m ipykernel install --user --name kerbal --display-name &amp;#34;Python (kerbal)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then to launch jupyter:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;going-to-the-mun&#34;&gt;Going to the Mun&lt;/h2&gt;
&lt;h3 id=&#34;connecting-to-ksp&#34;&gt;Connecting to KSP&lt;/h3&gt;
&lt;p&gt;In our first code blocks, we will be importing the libraries we need to get our astronauts to the Mun via Python. We will then connect to KSP vis the krpc plugin (assumes you have KSP up and running and the plugin working).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;krpc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;math&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;IPython.display&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; clear_output, display
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; krpc&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;connect()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;loading-the-apollo-rocket&#34;&gt;Loading the Apollo rocket&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;space_center&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;load(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;apollo001&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;space_center&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;active_vessel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Set up streams for telemetry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ut &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add_stream(&lt;span style=&#34;color:#a2f&#34;&gt;getattr&lt;/span&gt;, conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;space_center, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;ut&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;altitude &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add_stream(&lt;span style=&#34;color:#a2f&#34;&gt;getattr&lt;/span&gt;, vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;flight(), &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;mean_altitude&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apoapsis &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add_stream(&lt;span style=&#34;color:#a2f&#34;&gt;getattr&lt;/span&gt;, vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;apoapsis_altitude&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stage_2_resources &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;resources_in_decouple_stage(stage&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, cumulative&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obt_frame &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;body&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;non_rotating_reference_frame
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mun_orbit &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;space_center&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;bodies[&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Mun&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;position(obt_frame)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gravity-turn-into-orbit&#34;&gt;Gravity Turn into Orbit&lt;/h3&gt;
&lt;p&gt;In this next section, we are calculating the gravity turn angle. The sample provided by the KRPC samples uses a simple fraction to define the trun angle in degrees:
\[ \alpha = 90(\frac{a - s}{ e - s}) \]
where \(a\) is the current altitude, \(s\) is the altitude in which we want to start slowly turning the rocket horizontally, and \(e\) is the ending altitude where we want to have completed our turn upon reaching. This could be defined by a simple function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;get_gravity_turn_angle&lt;/span&gt;(alt, start_alt, end_alt, turn_angle):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_turn_angle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; alt &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; start_alt &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;and&lt;/span&gt; alt &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; end_alt:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        frac &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (alt &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; start_alt)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;(end_alt &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; start_alt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_turn_angle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; frac &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;abs&lt;/span&gt;(new_turn_angle &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; turn_angle) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            turn_angle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; new_turn_angle
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            turn_angle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; turn_angle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a future blog post, we will improve the gravity turn by invoking Physics to get a more accurate turn rate. For now, as a proof of concept and to focus on the circularization physics, we will proceed with this rough linear gravity turn. Next, we actually launch the rocket and execute the gravity turn so that we reach a target apoapsis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;target_pitch_and_heading(&lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;engage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;activate_next_stage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;turn_angle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start_alt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;250&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end_alt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;45000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target_alt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;700000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;state &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;LiftOff&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; turn_angle &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;and&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    clear_output(wait&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    turn_angle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; get_gravity_turn_angle(altitude(), start_alt, end_alt, turn_angle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; turn_angle &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;and&lt;/span&gt; apoapsis() &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; target_alt:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;target_pitch_and_heading(&lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;turn_angle, &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;GravityTurn&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; apoapsis() &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; target_alt&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.90&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;and&lt;/span&gt; apoapsis() &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; target_alt:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;ApoapsisRefinement&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; apoapsis() &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; target_alt:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; apoapsis() &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; target_alt:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;GoalApoapsisAchieved&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.00&lt;/span&gt;       
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;assets/index-41f20.png&#34; alt=&#34;The rocket starts to turn, making a 30 degree angle relative to the normal&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the rocket climbs higher, it will ease into an orientation perpendicular to the radius of the Earth:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/index-a87dd.png&#34; alt=&#34;as it nears cutoff, the rocket is nearly perpendicular to the normal&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;circularizing-the-orbit&#34;&gt;Circularizing the orbit&lt;/h2&gt;
&lt;p&gt;For an idealized circular orbit above atmospheric effects, the gravitational pull of the Earth on the body provides the centripetal force, with circular orbital radius \(r\) and let&lt;/p&gt;
&lt;p&gt;\[\mu = GM\]&lt;/p&gt;
&lt;p&gt;where \(G\) is the universal gravitational constant and \(M\) is the mass of the large body (here, the Earth)&lt;/p&gt;
&lt;p&gt;KRPC provides an easy way to access that value for any given celestial body:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mu &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;body&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;gravitational_parameter
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Back to Physics, we now have two equations from the basics of Newtonian physics, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cetripital Force: \[ F_c = \frac{m_0 v^2}{r}\]&lt;/li&gt;
&lt;li&gt;Gravitational Force: \[ F_g = \frac{m_0 GM}{r^2}\]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since these must balance out for an object to be in stead orbit, we can solve to find the ideal velocity \(v\) for a given orbit at radius \(r\):&lt;/p&gt;
&lt;p&gt;\[ F_g = m_0 a = \frac{m_0 \mu}{r^2} =\frac{m_0 v^2}{r} \]&lt;/p&gt;
&lt;p&gt;\[\implies v = \sqrt{ \frac{\mu}{r} }\]&lt;/p&gt;
&lt;p&gt;We see here that this velocity is entirely independent of the mass of the body, hence a very heavy object and a very light object which orbit at the same radius must be traveling at the same speed, assuming of course they are out of the region where atmospheric drag plays an important role.&lt;/p&gt;
&lt;h3 id=&#34;finding-an-equation-for-the-circularization-of-an-orbit&#34;&gt;Finding an equation for the circularization of an orbit&lt;/h3&gt;
&lt;p&gt;That is a starting point, but we have to dive deeper to calculate the numbers needed to actually achieve an approximation of this idealized orbit.&lt;/p&gt;
&lt;p&gt;Our next step is to invoke the &lt;em&gt;vis-viva equation&lt;/em&gt; (or also called the &lt;em&gt;orbital-energy-invariance law&lt;/em&gt;). We begin by noting that the &lt;strong&gt;specific orbital energy&lt;/strong&gt; of an orbiting object and the body it is orbiting is defined as a sum of their mutual potential energy and their total kinetic energy:&lt;/p&gt;
&lt;p&gt;\[ E_O = E_p + E_k\]&lt;/p&gt;
&lt;p&gt;For scenarios such as ours, where the orbiting object is much smaller in both size and mass than the body it orbits, this energy becomes easier to calculate since we can treat the larger body as being the center of our reference frame and hence at rest. We can also neglect the potential energy experienced by the gravitational attraction of the larger body by the smaller body. In this case,&lt;/p&gt;
&lt;p&gt;\[ E_O = \frac{m_0 v^2_0}{2} - \frac{\mu m_0}{r_0} \]&lt;/p&gt;
&lt;p&gt;The specific total energy is given as \(E_o/m_0 = \epsilon\) and this is conserved throughout the orbit (assuming the rocket is not burning fuel in an idealized orbit). Let \(v_a\) and \(r_a\) be the velocity and radius of the orbiting body at the apoapsis, and \(v_p\) and \(r_p\) similarly at the periapsis. Then energy conservation gives us the relation,&lt;/p&gt;
&lt;p&gt;\[ \epsilon = \frac{v_a^2}{2} - \frac{\mu}{r_a} = \frac{v_p^2}{2} - \frac{\mu}{r_p} \]&lt;/p&gt;
&lt;p&gt;At both \(r_a\) and \(r_p\), the velocity and radius vectors are perpendicular to each other, where hence we can invoke the conservation of angular momentum to give&lt;/p&gt;
&lt;p&gt;\[ r_p v_p = r_a v_a = Constant \]&lt;/p&gt;
&lt;p&gt;This gives us the relation that
\[ v_p =- \frac{r_a}{r_p}v_a \]&lt;/p&gt;
&lt;p&gt;and with some rearrangement of these equations, we get,&lt;/p&gt;
&lt;p&gt;\[ \frac{1}{2}\left( \frac{r_p^2 -r_a^2}{r_p^2}\right) v_a^2 = \mu \left(\frac{1}{r_a} - \frac{1}{r_p}\right) \]
\[ \frac{1}{2}v_a^2 = \mu \frac{r_p}{r_a \left( r_p + r_a \right)} \]&lt;/p&gt;
&lt;h4 id=&#34;relating-this-to-elipses-the-apoapsis-and-periapsis&#34;&gt;Relating this to elipses, the apoapsis and periapsis&lt;/h4&gt;
&lt;p&gt;From geometry of an ellipse that relates the semimajor axis to \(r_p\) and \(r_a\), \(2a = r_p + r_a\)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;  vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;apoapsis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;semi_major_axis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We substitute 2a in the our prior kinetic energy equation:
\[ \frac{1}{2}v_a^2 =  \mu \frac{2a -r_a}{2 r_a a}  \]
\[ \frac{1}{2}v_a^2 =  \mu \left(\frac{1}{r_a} - \frac{1}{2a}\right)  \]&lt;/p&gt;
&lt;p&gt;\[ v_a^2 = \mu \left( \frac{2}{r_a} - \frac{1}{a}\right) \]&lt;/p&gt;
&lt;p&gt;In a circularized orbit, \(a = r\), and so the velocity we need to have is&lt;/p&gt;
&lt;p&gt;\[ v_a^2 = \mu \left( \frac{2}{r_a} - \frac{1}{r_a}\right) = \mu \left( \frac{1}{r_a}\right) \]&lt;/p&gt;
&lt;p&gt;The \(\Delta v\) we need to achieve is the difference between these two velocities,&lt;/p&gt;
&lt;p&gt;$$ \Delta v = \sqrt{ \mu} \left( \sqrt{\left( \frac{1}{r_a}\right) } - \sqrt{\left( \frac{2}{r_a} - \frac{1}{a}\right)}\right) $$
$$ = \sqrt{\frac{\mu}{r_a}}\left( 1 - \sqrt{ \frac{2a -r_a}{a}}\right) $$&lt;/p&gt;
&lt;p&gt;In krpc code,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delta_v &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sqrt(mu&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;r)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sqrt((&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;a1&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;r)&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;a1))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this number in hand, we can do a little more math which will be discussed in more detail later to find the burn time. This calculation is highly dependent on the engine and design of the rocket in question:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;available_thrust
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Isp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;specific_impulse &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9.82&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m0 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;mass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m1 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; m0 &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; math&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;exp(delta_v &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; Isp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; f &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; Isp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;burn_time &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (m0 &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; m1) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; fr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add_node(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ut() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;time_to_apoapsis, prograde&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;delta_v)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# https://krpc.github.io/krpc/tutorials/launch-into-orbit.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Orientating ship for circularization burn&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;disengage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sas &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#666&#34;&gt;.1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sas_mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sas_mode&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;maneuver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;wait()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Waiting until circularization burn&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;burn_ut &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ut() &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;time_to_apoapsis &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; (burn_time&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2.&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lead_time &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;space_center&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;warp_to(burn_ut &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; lead_time)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Execute burn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Ready to execute burn&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time_to_apoapsis &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add_stream(&lt;span style=&#34;color:#a2f&#34;&gt;getattr&lt;/span&gt;, vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;orbit, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;time_to_apoapsis&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; time_to_apoapsis() &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; (burn_time&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2.&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;wait()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Executing burn&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(burn_time &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.05&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Fine tuning&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remaining_burn &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;add_stream(node&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;remaining_burn_vector, node&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;reference_frame)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;#vessel.auto_pilot.engage()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;disengage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sas &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#666&#34;&gt;.1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sas_mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;auto_pilot&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sas_mode&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;maneuver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; node&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;remaining_delta_v &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;throttle &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;remove()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Launch complete&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Orientating ship for circularization burn
Waiting until circularization burn
Ready to execute burn
Executing burn
Fine tuning
Launch complete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all went well, you should be in a fairly accurate (and we can make it even better!) circularized orbit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/index-2e331.png&#34; alt=&#34;an orbital view of the rocket showing a circularized orbit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that we have circularized our orbit, we can do some house keeping and eject uneeded components from the rocket. In a future iteration, we will want to eject these as soon as we clear the atmosphere in order to reduce as much mass as soon as possible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Drop stage 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;activate_next_stage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Drop the escape rocket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;activate_next_stage()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Drop the shields to lower weight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vessel&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;control&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;activate_next_stage()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;assets/index-50aec.png&#34; alt=&#34;showing the rocket against the milkyway with less stages&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Coordinate Systems 0001: Generalizing Away from Standard Euclidean</title>
      <link>https://3implieschaos.org/physics-c/cs001/</link>
      <pubDate>Sat, 23 Jul 2022 12:11:05 -0700</pubDate>
      
      <guid>https://3implieschaos.org/physics-c/cs001/</guid>
      
      <description>&lt;!-- &lt;script&gt;
    document.addEventListener(&#34;DOMContentLoaded&#34;, function() {
        renderMathInElement(document.body, {
            delimiters: [
                {left: &#34;$$&#34;, right: &#34;$$&#34;, display: true},
                {left: &#34;$&#34;, right: &#34;$&#34;, display: false}
            ]
        });
    });
&lt;/script&gt;
 --&gt;
&lt;div class=&#34;toc&#34;&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#topology&#34;&gt;Topology&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#coordinates-on-a-manifold&#34;&gt;Coordinates on a Manifold&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this note, we show how physicists construct more general coordinate systems that go beyond the standard Euclidean system.&lt;/p&gt;
&lt;h3 id=&#34;topology&#34;&gt;Topology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A topological space is a set with elements of points and mathematical rules (called a topology) that tell us how to define neighborhoods around these elements.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;neighborhood&amp;rsquo;s can be known from these axioms&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;every element belongs to all of its neighborhoods&lt;/li&gt;
&lt;li&gt;if a subset of points include a neighborhood of a specific point, that subset is a neighborhood of that specific point&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- ![](assets/index-4b64c.png) --&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;the intersection of two neighborhoods of a point is a neighborhood of that point&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- ![](assets/index-e4f51.png) --&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;a neighborhood A of a point contains a subset that is also a neighborhood of that point, and A is a neighborhood of every point in the subset&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- ![](assets/index-e9b94.png) --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the simpler topologies that we need to consider in physics is Euclidean&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; where the neighborhoods are called open balls defined by the Euclidean metric (think Pythagorean theorem):&lt;/p&gt;
&lt;p&gt;$$ B_r(p) = { x \in \R^n: d(p, x) &amp;lt; r }$$&lt;/p&gt;
&lt;p&gt;In other words, all points surrounding the point such that those points are less than a distance r from that point&lt;/p&gt;
&lt;h3 id=&#34;coordinates-on-a-manifold&#34;&gt;Coordinates on a Manifold&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A manifold is a topological space that &amp;ldquo;looks&amp;rdquo; Euclidean in a small neighborhood of any given point. How we define &amp;ldquo;small&amp;rdquo; depends on the nature of that space, but think of the Earth, which is an oblate spheroid, but appears to be a flat two dimensional (more or less) space to anybody floating on the ocean or walking on flatland. Manifolds are useful in physics because it abstracts our discussion of spaces away from the Euclidean realm typical of Newtonian physics. Relativity requires the concept of manifolds for example.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can abstract our typical Newtonian coordinate systems to a definition that also works for manifolds.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start most simply with a coordinate system. An abstract coordinate system for a system with $n$ dimensions on an n-manifold M (an n-dimensional manifoled) can be written:&lt;/p&gt;
&lt;p&gt;$$ \vec{x^i}, i \in \N_{&amp;gt; 0}, i \leq n $$&lt;/p&gt;
&lt;p&gt;We wish to create a &amp;ldquo;local basis&amp;rdquo; around a point via tangent vectors:&lt;/p&gt;
&lt;p&gt;$$ \vec{e_i} = \frac{\partial}{\partial x^i} \equiv \partial_i, i \in \N_{&amp;gt; 0}, i \leq n $$&lt;/p&gt;
&lt;p&gt;Unlike the previous definition of $x^i$ which was descriptive, this definition is prescriptive, that is, it is how to create the local basis at each point. To get the actual local basis, you need to calculate the tangents at each point. This also allows you to define a metric tensor&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; on the manifold as the dot product between the local basis vectors:&lt;/p&gt;
&lt;p&gt;$$ g^{ij} = \vec{e}_i \cdot \vec{e}_j $$&lt;/p&gt;
&lt;p&gt;The inverse of this metric tensor can then be used to define the daul basis&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; $g^{ij} = (g^{-1})_{ij}$:&lt;/p&gt;
&lt;p&gt;$$ \vec{e^i} = \vec{e_j} g^{ij}, i \in \N_{&amp;gt; 0}, i \leq n $$&lt;/p&gt;
&lt;p&gt;What do we need a dual basis for? In Euclidean space, to get the component of a function along a specific basis direction, say $\vec{e_i}$, all we need is $\vec{f(x)}\cdot \vec{e_i}$. But in more complicated spaces, we can have a scenario where $\vec{e_i \cdot e_j} \neq 0, \forall i \neq j$. With a dual basis and a local basis, we have the orthogonality we may need to extract components along specific dimensions.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Topological_space#Examples_of_topologies&#34;&gt;Topology&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_topology&#34;&gt;Euclidean topology&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;A &lt;strong&gt;metric tensor&lt;/strong&gt; on a manifold is a way of defining distance and angles in a local area around each point on a manifold.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dual_basis&#34;&gt;Dual basis&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>Rössler Strange Attractor with Python: Part 1</title>
      <link>https://3implieschaos.org/post/math_science/chaos/rossler_strange_attractor_with_python_series/rossler_strange_attractor_with_python_part1/</link>
      <pubDate>Sun, 03 Jul 2022 19:21:05 -0700</pubDate>
      
      <guid>https://3implieschaos.org/post/math_science/chaos/rossler_strange_attractor_with_python_series/rossler_strange_attractor_with_python_part1/</guid>
      
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of the most popular and widely known strange attractors is the Rössler strange attractor. We will explore
this mathematical object using Python in a series of blog posts. Before we go into any detail about what it is, what
is a strange attractor, and so on, let&amp;rsquo;s first take a quick look at it using some simple Python code.&lt;/p&gt;
&lt;h2 id=&#34;simple-integration-using-eulers-method&#34;&gt;Simple Integration using Euler&amp;rsquo;s method&lt;/h2&gt;
&lt;p&gt;This is a quick intro, and hopefully part of a longer series on using Python to analyze the Rössler Strange Attractor.&lt;/p&gt;
&lt;p&gt;We begin by importing the basic libraries that we will use as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;matplotlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;%&lt;/span&gt;matplotlib inline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;plt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;mpl_toolkits.mplot3d&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; Axes3D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;define-rössler-system&#34;&gt;Define Rössler System&lt;/h3&gt;
&lt;p&gt;Next we define a python function which will define the Rössler equations for us to integrate and graph. The Rössler equestions are&lt;/p&gt;
&lt;p&gt;$$ \dot{x} = -y -z $$
$$ \dot{y} =  x + ay $$
$$ \dot{z} = b + z(x-c) $$&lt;/p&gt;
&lt;p&gt;They function over a number of parameters, something we will explore in more detail in future posts. For now, let&amp;rsquo;s just pick a pretty common set of parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;rossler&lt;/span&gt;(x, y, z, a&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.2&lt;/span&gt;, b&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.2&lt;/span&gt;, c&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5.7&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x_dot &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; z
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_dot &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; a&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    z_dot &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; z&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;c)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; x_dot, y_dot, z_dot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;numerical-integration&#34;&gt;Numerical Integration&lt;/h3&gt;
&lt;p&gt;These equations can&amp;rsquo;t be solved for non-trivial sets of parameters, so we must integrate them numerically. Here, we use a very simpler Euler&amp;rsquo;s method of integration to get us out the door. This method is &lt;em&gt;never&lt;/em&gt; a good idea to use for non-trivial applications, but is a quick easy way to get started.&lt;/p&gt;
&lt;p&gt;Euler&amp;rsquo;s method makes use of the definition of a derivative:&lt;/p&gt;
&lt;p&gt;$$\dot{x} = \frac{dx}{dt} = \lim_{\Delta \rightarrow 0} \frac{\Delta x}{\Delta t} $$&lt;/p&gt;
&lt;p&gt;To create a simplistic way to numerical integrate where:&lt;/p&gt;
&lt;p&gt;$$ \Delta x = \dot{x} \Delta t $$&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t very accurate over the long term, but with small enough $\Delta t$ can give a fair approximation in the short term. For this simple demo, we choose to let $dt = 0.05 s$ and choose to plot 1000 points for a total of 50 seconds of data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0.05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stepCnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we set up NUMPY arrays that will hold the 1000 points for each dimension, and then set intitial values (what initial values to use will be explained in more detail in a post where we discuss the parameters as well).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Need one more for the initial values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;empty((stepCnt &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ys &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;empty((stepCnt &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zs &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;empty((stepCnt &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Setting initial values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xs[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], ys[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;], zs[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1.05&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we run the Euler&amp;rsquo;s method integration to populate the arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Stepping through &amp;#34;time&amp;#34;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a2f&#34;&gt;range&lt;/span&gt;(stepCnt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Derivatives of the X, Y, Z state&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x_dot, y_dot, z_dot &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; rossler(xs[i], ys[i], zs[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xs[i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xs[i] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (x_dot &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; dt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ys[i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ys[i] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (y_dot &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; dt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zs[i &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; zs[i] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; (z_dot &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; dt)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;plot&#34;&gt;Plot&lt;/h3&gt;
&lt;p&gt;Our final step is to plot the results so that we can see the &lt;code&gt;trajetory&lt;/code&gt; of the Rössler system over these 50 seconds of integration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fig &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;figure()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ax &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;axes(projection&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;3d&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ax&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;plot3D(xs, ys, zs, &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;Rössler&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;output_12_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next&lt;/h3&gt;
&lt;p&gt;OK, we have seen it, but what is it, and how deep does the rabbit hole go? Part 2 will explore this further.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
